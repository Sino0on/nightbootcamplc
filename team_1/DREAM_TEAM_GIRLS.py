# # DREAMTEAM 2_1

# Задание 1: #done
# Спросите у пользователя строку НА Английском или целое предложение и
# удалите все глассные буквы там.
# То что осталось от строки выведите на экран.
# Строка не должна быть короче 10 символов.
#
# def anti_vowel():
#     text = input('enter text in english, at least 10 symbols \n ')
#     vowels = 'aeiouAEIOU'
#     for i in text:
#         if i in vowels:
#             text = text.replace(i, '')
#     return text
#
# print(anti_vowel())

######################################## 1

#
#
## Задание 2: #done
# Вам дан набор данных accounts.
# Функция должна проходить по каждому листу состоящему из 3-х символов и
# найти ту
# где их сумма больше всего.

# accounts = [
#     [[1,5,5],[7,4,5],[1,3,5],[2,1,5],[7,3,9],[8,3,5],[1,5,0],[7,3,2],[9,3,5]],
#     [[1,5,3],[2,7,3],[6,3,5],[1,5,9],[7,3,3],[3,5,4],[1,5,6],[7,3,6],[3,5,8]],
#     [[1,5,3],[7,3,0],[3,5,4],[1,5,6],[7,3,2],[3,5,4],[1,5,9],[7,3,2],[3,5,0]],
#     [[1,5,1],[7,3,2],[3,5,3],[1,5,4],[7,3,5],[3,5,6],[1,5,7],[7,3,8],[3,5,9]],
# ]
# max_sum_list = max(accounts)
# print(max_sum_list)

################################################################################

# Задание 3: #done
# Вам даны 2 листа:

# list_1 = ['a', 'bc', 'de']
# list_2 = ['ab', 'c', 'de']

# Напишите функцию которая их принимает и сравнивает на равность.
# Пример где листы равны:

    # a + bc + de = abcde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['1', '23', 'abcde']

# Пример где листы НЕ равны:

    # a + cb + de = acbde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['123', 'de', 'abc']


# def compare(list_1, list_2):
#     a = ''.join(list_1)
#     b = ''.join(list_2)
#     if a == b:
#         return True
#     else:
#         return False
#
# list_1 = ['a', 'bc', 'de']
# list_2 = ['ab', 'c', 'de']
# print(compare(list_1, list_2))
################################################## 1


# Задание 4: NO
# Известно что функция print() выводит на экран текст который Вы в ней указали.
# Известно что есть ещё один способ вывести на экран любой текст sys.stdout.write(), но его использовать нельзя.
# Так случилось что функция print поменяла своё имя и стала называться display.
# Выведите с помощью новой функции display() на экран следующий текст: "Теперь я тут PRINT()"
# Общее количество строк для решения этой задачи не может быть больше 2-х строк, иначе задание не принимается.

################################################################################


#
# Задание 5: #done
# Вам дан SET значений:
#
# uniques = {3,13,15,27,1,4,8,23,19,12,9,2,17}
#
# Создайте функцию которая:
# Удалите все чётные значения внутри SET, а оставшиеся отсортирует по возр-ю.
# В результате, ваша функция должна вернуть отсортированный SET и неважно, каким будет SET растопленным или замороженным.
#
# def modify_list(l):
#     ll = []
#     for i in l:
#         if i % 2 != 0:
#             ll.append(i)
#     return ll
# l={3,13,15,27,1, 2, -3, 1,4,8,23,19,12,9,2,17}
# lm=list(l)
# lm.sort(reverse = True)
# a = modify_list(l)
# print(set(a))
############################################# 1



# Задание 6:#done
# В Python есть такой тип Данных как Boolean...
# Создайте TUPLE который ТЕХНИЧЕСКИ состоит из 4 Булевых ЗНАЧЕНИЙ.


# boolean = [True, False, True, False]
# print(boolean)
################################################################################


# Задание 7: #done
# Вам дан TUPLE и пустая Dictionary:

# pairs = {}

# В Tuple перечислены элементы, где идёт строгая очерёдность STRING и INTEGER.
# То есть если перед вами элемент типа данных STRING то следующий точно INTEGER и наоборот.
# keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6 'six', 7, 'seven', 'eight', 8, 'nine',9, 10, 'ten', 11, '11', 12 ,'13')
# Проходя по TUPLE необходимо брать элементы по парно, один элемент может относиться только и только к одной паре.
# Ваша задача выявить если элемент является типом данных string() то записывать его как ключ в Dictionary -> pairs.

# Пример:
# pairs ={'one': 1, 'two': 2, 'three': 3, ...}

# keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6, 'six', 7, 'seven', 'eight', 8, 'nine', 9, 10, 'ten', 11, '11', 12, '13')
#
# pairs = {}
#
# for i in range(0, len(keys_values), 2):
#     if isinstance(keys_values[i], str):
#         pairs[keys_values[i]] = keys_values[i+1]
#
# print(pairs)
################################################################################


# Задание 8: #done
# Создайте 2 функции input которые спрашивают пользовтеля:
# 1. Какой длины должно быть число.
# 2. Из каких цифр только должно состоять число.
# Если пользователь попросит сгенерировать число длиною меньше 7 символов, скажите что это слишком короткое число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.
# Если пользователь попросит сгенерировать число длиною больше 30 символов, скажите что это слишком длинное число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.
# Если пользователь введёт меньше чем 3 числа во втором input, скажите что он ввёл слишком мало значений и спросите снова.
# Во втором input числа будут вводиться строго либо через запятую либо через пробел.
# Если пользователь использовал и пробелы и запятые во втором input, скажите что он ввёл неправильные значения и спросите числа снова.
# После того как пользователь введёт вам оба верных значения:
# сгенерируйте ему число длиною как он попросил и состоящее только из тех чисел которые он указал.

# Пример:
# Какой длины должно быть число: 7
# Какие цифры только должны присутствовать: 2,3,5,0,1

# Результат:
# 2201550

# Какой длины должно быть число: 9
# Какие цифры только должны присутствовать: 2 7 5

# Результат:
# 275727572


# import random
#
# def get_length():
#     while True:
#         length = input("Какой длины должно быть число: ")
#         if not length.isdigit():
#             print("Введите целое число.")
#             continue
#         length = int(length)
#         if length < 7:
#             print("Это слишком короткое число.")
#         elif length > 30:
#             print("Это слишком длинное число.")
#         else:
#             return length
#
# def get_digits():
#     while True:
#         digits_input = input("Из каких цифр только должно состоять число (через запятую или пробел): ")
#         digits = digits_input.replace(",", " ").split()
#         if len(digits) < 3:
#             print("Вы ввели слишком мало значений.")
#             continue
#         if any(not d.isdigit() for d in digits):
#             print("Введите только цифры.")
#             continue
#         if len(set(digits)) != len(digits):
#             print("Вы ввели повторяющиеся значения.")
#             continue
#         return digits
#
# length = get_length()
# digits = get_digits()
#
# allowed_digits = set(digits)
# number = ''.join(random.choice(digits) for _ in range(length))
# print(number)
########################################################## 1
#


# Задание 9: #done
# Попросить пользователя ввести текст.В результате
# вывести процент букв в верхнем регистре(заглавные)
# и в нижнем регистре(прописные)
#

# text = input('Enter your text\n')
# Index = 0
# Upper = 0
# Lower = 0
# try:
#     while True:
#         if text[Index] == text[Index].upper():
#             Upper += 1
#
#         else:
#             Lower += 1
#
#         Index += 1
# except:
#     print('Upper =', Upper*100/(Upper+Lower), '%')
#     print('Lower =', Lower*100/(Upper+Lower), '%')


################################### 0.5


# Задание 10: #done
# Если вы были на Луне сейчас, ваш вес будет 16,5% от вашего веса земли.
# Для его расчета необходимо умножить на 0,165.
# Если в ближайшие 15 лет ваш вес будет увеличиваться на 1 кг каждый год.
# Какой будет ваш вес каждый год на Луне в следующем 15 лет?

# weight_on_earth = float(input("Введите ваш текущий вес на Земле в кг: "))
#
# weight_on_moon = weight_on_earth * 0.165
# on_moon_each_year = weight_on_moon
# years = 15
# for i in range(1, years+1):
#     on_moon_each_year += 1
#     print(f"Вес на Луне через {i} год(а) будет: {on_moon_each_year:.2f} кг")

#################################### 0.5


# Задание 11:#done
# Попросить пользователя ввести слова через пробел.
# Отсортировать слова по количеству символов и вывести на экран результат.

# Пример input: сон машина стол книга девочка
# Результат: сон стол книга машина девочка

# def length():
#     word = input('Введите слова через пробел ').split()
#     word.sort(key=len)
#     total = ' '.join(word)
#     print(total)
# length()
#################################### 1

#
# Задание 12: #done
# Напишите функцию который будет конвертировать Фаренгейт в Цельсии и
# наоборот.
#
# цельс в фар
#
# def converter_Far(celsius):
#     f = 9/5* celsius +32
#     return f
#
# m = converter_Far(17)
# print(m)
#
# # from фар в целс
# def converter_Cel(far):
#     cel = 5.0*(far - 32) / 9
#     return cel
#
# b = converter_Cel(100)
# print(b)

############################################# 1
#
# Задание 13:#done

#     Пользователь делает вклад в размере a рублей сроком на years лет под 10% годовых (каждый год размер его вклада увеличивается на 10%. Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже будут проценты).
#     Написать функцию bank, принимающая аргументы a и years, и возвращающую сумму, которая будет на счету пользователя.
#####################################################################

# def bank(a, years):
#     for i in range(years):
#         a += int(a*0.1)
#     return a
#
# print(bank(10000, 5))
############################################# 1

# Задание 14: #done
#     Несколько дней подряд метеоролог измеряет температуру воздуха в своём городе. Ваша программа считывает измеренные им значения и выводит среднее значение температуры за время измерений. Чтобы обозначить конец ввода данных, вводится значение, меньшее -300 (реальная температура не может быть ниже -273.15).
#     При проведении вычислений с действительными числами ответ может незначительно отличаться от математически правильного из-за погрешностей округления; это не повлияет на проверку решения.
########################################################################
# def create_avg():
#     weathers = []
#     while True:
#         a = int(input('Введите температуру на сегодня - '))
#         if a < -150:
#             break
#         weathers.append(a)
#     return sum(weathers) / len(weathers)
#
#
# print(create_avg())

############################################# 1
# DREAMTEAM 2_2

# Задание 1: #done
# У вас есть идея создать Back-end для игры: "Угадай число."
# Данный код генерирует рандомное число.
###################
# import random as rd
# random_number = rd.randint(0,10)
# print(random_number)
###################
# С помощью функции:
#    my_number = int(input("Введите число: "))
# спрашивайте число от пользователя.
# Запустите бесконечный цикл!
# И пытайтесь спрашивать у пользователя какое-то число каждый раз.
# Если пользователь угадал число которое сгенерировал компьютер остановите цикл и скажите пользователю - "Вы угадали!"
# Если пользователь не угадал вы снова спросите у него число.
# Если пользователь 3 раза подряд не угадал число, вы останавливаете цикл и говорите: "Вы проиграли..."


# import random as rd
# random_number = rd.randint(0, 10)
# print(random_number)
#
# def gues_number():
#     tries = 0
#     while True:
#         my_number = int(input("Введите число от 0 до 10: "))
#         tries += 1
#
#         if my_number == random_number:
#             print("Вы выиграли!")
#             break
#         elif tries == 1:
#             print('Попробуйте еще раз, сталось 2 попытки')
#         elif tries == 2 and tries < 3:
#             print('Попробуйте еще раз, сталась 1 попытка')
#         else:
#             print('Вы проиграли')
#             break
#
# gues_number()
############################################# 1
#######################################################################



# Задание 2: #done
        # Напишите программу, которая циклично запрашивает у пользователя номера символов по таблице Unicode и выводит соответствующие им символы.
        # Завершает работу при вводе нуля.

# while True:
#     num = int(input("Введите номер символа в таблице Unicode: "))
#     if num == 0:
#         break
#     else:
#         print(chr(num))
############################### 0.5



# Задание 3: #done
        # Напишите программу, которая измеряет длину введенной строки.
        # Если строка длиннее десяти символов, то выносится предупреждение.
        # Если короче, то к строке добавляется столько символов *, чтобы ее длина составляла десять символов, после чего новая строка должна выводиться на экран.
# s=input()
# if len(s)>10:
#     print("Слишком длинная строка")
# else :
#    for i in range (len(s),10):
#       s+="*"
#    print(s)
##################################### 0.5

#
# Задание 4: #done
#         Напишите программу, которая запрашивает у пользователя шесть вещественных чисел.
#         На экран выводит минимальное и максимальное из них, округленные до двух знаков после запятой.
#         Выполните задание без использования встроенных функций min() и max().
# ###################################################################
# numbers = []
# for i in range(6):
#     num = float(input("Введите число: "))
#     numbers.append(num)
#
#
# min_num = numbers[0]
# max_num = numbers[0]
#
#
# for num in numbers:
#     if num < min_num:
#         min_num = num
#     if num > max_num:
#         max_num = num
#
#
# print("Минимальное число:", round(min_num, 2))
# print("Максимальное число:", round(max_num, 2))

#OR

# def find_min(numbers):
#     min_num = numbers[0]
#     for num in numbers:
#         if num < min_num:
#             min_num = num
#     return min_num
#
#
# def find_max(numbers):
#     max_num = numbers[0]
#     for num in numbers:
#         if num > max_num:
#             max_num = num
#     return max_num
#
# numbers = []
# for i in range(6):
#     num = float(input("Введите число: "))
#     numbers.append(num)
#
#
# min_num = find_min(numbers)
# max_num = find_max(numbers)
#
#
# print("Минимальное число:", round(min_num, 2))
# print("Максимальное число:", round(max_num, 2))

############################### 1


# Задание 5: #done
#         Напишите программу которая принимает число любой длины и вытаскивает из него самое большое и самое маленькое число.
# ###################################################################
# num = input("Введите число: ")
#
#
# min_num = int(num[0])
# max_num = int(num[0])
#
#
# for digit in num:
#     if int(digit) < min_num:
#         min_num = int(digit)
#     if int(digit) > max_num:
#         max_num = int(digit)
#
#
# print("Самое маленькое число:", min_num)
# print("Самое большое число:", max_num)

############################## 1

# Задание 6:#done
#     Функция
#     Напишите функцию, которая берет текст, и возвращает строковое значение, состоящее из заглавных букв.
#     Используйте текст, данный выше (The Zen of Python).
#     Подсказка: используйте метод строчных значений, который проверяет, “заглавность” буквы.
# text = """
# The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.
# Simple is better than complex.Complex is better than complicated.
# Flat is better than nested.Sparse is better than dense.
# Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.
# Errors should never pass silently.Unless explicitly silenced.
# In the face of ambiguity, refuse the temptation to guess.
# There should be one--and preferably only one --obvious way to do it.
# Although that way may not be obvious at first unless you're Dutch.
# Now is better than never.
# Although never is often better than *right* now.
# If the implementation is hard to explain, it's a bad idea.
# If the implementation is easy to explain, it may be a good idea.
# Namespaces are one honking great idea --let's do more of those!
# """
# def upper_letter(text):
#     ending_text = ''
#     for i in text:
#         if i.isupper():
#             ending_text += i
#     return (ending_text)
# ending_text = upper_letter(text)
# print(ending_text)
######################################### 1



# Задание 7:#done
#     Чтение из файла.
#     Создайте файл с текстом The Zen of Python.
#     Напишите функцию, которая считайте его и возвратит список из слов, которые начинаются на букву “c” или “C”.
#     Подсказка: используйте метод строчных значений, который проверяет, начинается ли слово на переданную букву.
####################################################################
# def letter_c(text):
#     list_of_word = []
#     with open(text, 'r') as my_file:
#         zen_of = my_file.read()
#         words = zen_of.split()
#         for i in words:
#             if i.startswith('C') or i.startswith('c'):
#                 list_of_word.append(i)
#         return list_of_word
# text = 'zen_of_python.txt'
# list_of_word = letter_c(text)
# print(list_of_word)

######################################## 1

# Задание 8: #done
#     Банкомат
#     Напишите код банкомата, который принимает цифру, выдает деньги с номиналом 5000, 2000, 1000, 500, 200, 100, 50, 20, 10, 5, 3, 1.
#     Подсказка: напишите функцию, используйте divmod()

# def atm(amount):
#     denominations = [5000, 2000, 1000, 500, 200, 100, 50, 20, 10, 5, 3, 1]
#     result = {}
#     for d in denominations:
#         count, amount = divmod(amount, d)
#         if count:
#             result[d] = count
#     return result
# #
# print(atm(54325))


# amount = int(input("Введите запрошенную сумму: "))
# result = atm(amount)
# print("Купюры для выдачи:")
# for d, count in result.items():
#     print(f"{d}: {count}")
################################### 1
##################################################################



# Задание 9:#done
#     Напишите функцию которая принимает два аргумента (числа), умножает их друг на друга,
#         и возвращает функцию, которая также берет два аргумента (числа),
#             и возвращает результат умножения аргументов внешней функции плюс результат деления
#                 аргументов внутренней функции.
#     Подсказка: (outer_arg1 * outer_arg2) + (inner_arg1 / inner_arg2)

# def outer(outer_arg1: int, outer_arg2: int):
#     def inner(inner_arg1: int, inner_arg2: int):
#         return (outer_arg1 * outer_arg2) + (inner_arg1 / inner_arg2)
#     return inner
#################################### 1





# Задание 10:#done
#     Фильтрация с помощью filter(). Необходимо написать функцию, и передать ее filter(),
#     чтобы получить список только тех слов из текста text (см. выше “The Zen of Python”), что содержат букву ‘p’.
#     Подсказка: необходимо заменить \n на пробел.

#     То есть, это нужно проделать еще до фильтрации.
#     Функция, которая будет передана в filter() должна возвращать True, если в слове есть буква ‘p’.

# for i in range(text.count('\n')):
#     text = text.replace('\n', ' ')
# for i in range(text.count('.')):
#     text = text.replace('.', ' ')
# print(text.count('\n'))
#
#
# def in_p(item):
#     if 'p' in item:
#         return True
#     return False
#
#
# print(*filter(in_p, text.split(' ')))
############################ 1




# Задание 11: #done
#     Дано
    # dict_one = {'a':1, 'b':2, 'c':3}
    # dict_two = {'d':4, 'e':5, 'f':6}
    # dict_three = {'g':7, 'h':8, 'i':9}
    # dict_four = {}
#     С помощью цикла for необходимо собрать три первых словаря в словарь dict_four

#     Подсказка: Для удобства итерации, первые три словаря можно записать в кортеж (dict_one, dict_two, dict_three
# for key, value in dict_one.items():
#     dict_four[key] = value
# for key, value in dict_two.items():
#     dict_four[key] = value
# for key, value in dict_three.items():
#     dict_four[key] = value
#
#     print(dict_four)
############################ 0.5


# Задание 12:#done
#     Аналог шифра цезаря ". Программа должна запрашивать элементы
#     списка через пробел. После чего пользователь должен ввести значение
#     для сдвига элементов списка. Значение может быть как положительным,
#     так и отрицательным. Если значение положительное, элементы списка
#     должны сдвигаться вправо, если отрицательное - влево. Результат
#     необходимо вывести на экран:

#     Пример:
#     [1, 2, 3, 4, 5], сдвиг 2
#     [3, 4, 5, 1, 2]


# def shifr_cezarya(my_list, number):
#     result = my_list[number:]
#     result += my_list[:number]
#     return result
#
#
# a = input().split(' ')
# n = int(input())
# print(shifr_cezarya(a, n))

########################## 1


# Задание 13:#done
#     Напишите программу, где исходный список содержит положительные и отрицательные числа.
#     Требуется положительные поместить в один список, а отрицательные - в другой.
###################################################################
# def positive_negative(numbers):
#     positive = []
#     negative = []
#     for i in numbers:
#         if i >= 0:
#             positive.append(i)
#         else:
#             negative.append(i)
#     return (positive, negative)
#
# print(positive_negative([1,2,3,4,5,6,-1,-4,3,-56]))
################################### 1

# Задание 14:#done
#     Написать функцию season, принимающую 1 аргумент — номер месяца (от 1 до 12), и возвращающую время года, которому этот месяц принадлежит (зима, весна, лето или осень).
#####################################################################
# def season(month):
#     if month in (12, 1, 2):
#         return ("зима")
#     elif month in (3, 4, 5):
#         return ("весна")
#     elif month in (6, 7, 8):
#         return ("лето")
#     elif month in (9, 10, 11):
#         return ("осень")
#     else:
#         return False
#
# print(season(12))

######################################## 1


############################################## 20