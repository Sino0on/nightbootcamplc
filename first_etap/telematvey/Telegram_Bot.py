from aiogram import Bot, Dispatcher, types, executor
from random import choice
import markups as nav
import json
import config

bot = Bot(config.bot_token)
dp = Dispatcher(bot)



async def on_startup(_):                                 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –Ω–∞ –∑–∞–ø—É—Å–∫–µ
    print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')



@dp.message_handler(commands=['start'])                          # –•–∞–Ω–¥–ª–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def echo_starter(messege: types.Message):
    await bot.send_photo(chat_id=messege.chat.id,
                         photo="https://img.championat.com/i/n/j/16546005982003863007.jpg",
                         caption="–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=nav.main_menu)
    await messege.delete()



@dp.message_handler(commands=['help'])                          # –•–∞–Ω–¥–ª–µ—Ä –≤—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥
async def echo_helper(messege: types.Message):
    await messege.reply(text=config.helper)
    await messege.delete()



@dp.message_handler(commands=['description'])                     # –•–∞–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
async def echo_descriptioner(messege: types.Message):
    await messege.answer(text=config.des)
    await messege.delete()



@dp.message_handler(commands=['sticker'])            # –•–∞–Ω–¥–ª–µ—Ä –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Å—Ç–∏–∫–µ—Ä –∫–æ—Ç–∞
async def get_sticker(messege: types.Message):
    with open("database.json", "r") as f:
        data = json.load(f)
        sticker = choice(data["sticker"])
    await bot.send_sticker(messege.from_user.id, sticker=sticker)
    await messege.delete()



@dp.message_handler()
async def bot_messege(messege: types.Message):
    with open('database.json', 'r') as f:
        data = json.load(f)
    if messege.text == "ü•ä–°–ø–æ—Ä—Ç":              # –í—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –°–ø–æ—Ä—Ç
        with open("database.json", "r") as f:
            data = json.load(f)
            sport = choice(data["sport"])
        try:
            await bot.send_photo(chat_id=messege.chat.id, photo=sport[1], caption=sport[0],
                                 reply_markup=nav.ikb)
            await messege.delete()
        except:                                         # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            await bot.send_photo(chat_id=messege.chat.id, photo=config.phot, caption=sport[0],
                                 reply_markup=nav.ikb)
            await messege.delete()

    elif messege.text == "üéì–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":                     # –í—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        with open("database.json", "r", encoding='utf8') as f:
            data = json.load(f)
            education = choice(data["education"])
        try:
            await bot.send_photo(chat_id=messege.chat.id, photo=education[1], caption=education[0],
                                 reply_markup=nav.ikb)
            await messege.delete()
        except:
            await bot.send_photo(chat_id=messege.chat.id, photo=config.phot, caption=education[0],
                                 reply_markup=nav.ikb)
            await messege.delete()

    elif messege.text == "üé≥–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è":                       # –í—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –†–∞–∑–≤–ª–ª–µ—á–µ–Ω–∏—è
        with open("database.json", "r") as f:
            data = json.load(f)
            entertainments = choice(data["entertainments"])
            try:
                await bot.send_photo(chat_id=messege.chat.id, photo=entertainments[1], caption=entertainments[0],
                                     reply_markup=nav.ikb)
                await messege.delete()
            except:
                await bot.send_photo(chat_id=messege.chat.id, photo=config.phot, caption=entertainments[0],
                                     reply_markup=nav.ikb)
                await messege.delete()


    elif messege.text == "üßπ–†–∞–±–æ—Ç–∞ –ø–æ –¥–æ–º—É":                          # –í—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –†–∞–±–æ—Ç–∞ –ø–æ –¥–æ–º—É
        with open("database.json", "r") as f:
            data = json.load(f)
            housework = choice(data["housework"])
        try:
            await bot.send_photo(chat_id=messege.chat.id, photo=housework[1], caption=housework[0],
                                 reply_markup=nav.ikb)
            await messege.delete()
        except:
            await bot.send_photo(chat_id=messege.chat.id, photo=config.phot, caption=housework[0],
                                 reply_markup=nav.ikb)
            await messege.delete()

    elif messege.text == 'üìù–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ':
        await bot.send_photo(chat_id=messege.chat.id,
                             photo='https://thumbs.dreamstime.com/z/sorry-having-technical-difficulties-message-yellow-sign-message-isolated-white-technical-difficulties-message-215071343.jpg',
                             caption=f'–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ "–°–æ–∑–¥–∞—Ç—å" –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —á–µ—Ä–µ–∑ category —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ "url=" –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ \n{data.keys()}')
        await messege.delete()

    elif messege.text == '‚û°Ô∏è–ü—Ä–æ—á–µ–µ':                                # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é
        await messege.answer(text=messege.text, reply_markup=nav.other_menu)
        await messege.delete()

    elif messege.text == '‚úã–ü–æ–º–æ—â—å':                      # –í—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥
        await messege.reply(text=config.helper)
        await messege.delete()

    elif messege.text == "üìÉ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞":                 # –í—ã–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
        await messege.answer(text=config.des, parse_mode="HTML")
        await messege.delete()

    elif messege.text == "üêà–°—Ç–∏–∫–µ—Ä –∫–æ—Ç–∏–∫–∞":
        with open("database.json", "r") as f:
            data = json.load(f)
            sticker = choice(data["sticker"])
        await bot.send_sticker(messege.from_user.id, sticker=sticker)
        await messege.delete()

    elif messege.text == "‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await messege.answer(text=messege.text, reply_markup=nav.main_menu)
        await messege.delete()
    elif '–°–æ–∑–¥–∞—Ç—å' in messege.text:
        category = messege.text.split('category=')[-1].split(' ')[0]
        image = messege.text.split('url=')[-1]
        description = messege.text.split('–°–æ–∑–¥–∞—Ç—å')[-1].split('category')[0]
        data[category].append([description, image])
        with open('database.json', 'w', encoding='utf8') as f:
            json.dump(data, f, ensure_ascii=False)
        await messege.answer('–£—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ')




@dp.callback_query_handler()                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def task_answer(callback: types.CallbackQuery):
    if callback.data == "get":
        await callback.answer(text="–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –ú–æ–ª–æ–¥–µ—Ü! üëç")
    elif callback.data == "pass":
        await callback.answer(text="–í—ã –Ω–µ—É–¥–∞—á–Ω–∏–∫, –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–∂–µ —Ç–∞–∫–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ! üëé")




if __name__ == "__main__":                             # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)